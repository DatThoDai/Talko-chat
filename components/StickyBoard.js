import React, {useState, useEffect} from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  FlatList,
  Dimensions,
  ActivityIndicator,
} from 'react-native';
import Icon from 'react-native-vector-icons/Ionicons';
import {useDispatch, useSelector} from 'react-redux';
import {sendMessage} from '../redux/chatSlice';

// Default emoji sets
const EMOJI_SETS = [
  {
    name: 'Th∆∞·ªùng d√πng',
    emojis: [
      'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá',
      'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö',
      'üòã', 'üòõ', 'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü§©',
      'üëç', 'üëé', 'üëè', 'üôå', 'ü§ù', 'üëä', '‚úåÔ∏è', 'ü§û', 'ü§ü', 'ü§ò',
      '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'üíî', '‚ù£Ô∏è', 'üíï',
    ],
  },
  {
    name: 'C·∫£m x√∫c',
    emojis: [
      'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', '‚ò∫Ô∏è', 'üòä',
      'üòá', 'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô',
      'üòö', 'üòã', 'üòõ', 'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé',
      'ü§©', 'ü•≥', 'üòè', 'üòí', 'üòû', 'üòî', 'üòü', 'üòï', 'üôÅ', '‚òπÔ∏è',
    ],
  },
  {
    name: 'ƒê·ªông v·∫≠t',
    emojis: [
      'üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ',
      'ü¶Å', 'üêÆ', 'üê∑', 'üêΩ', 'üê∏', 'üêµ', 'üôà', 'üôâ', 'üôä', 'üêí',
      'üêî', 'üêß', 'üê¶', 'üê§', 'üê£', 'üê•', 'ü¶Ü', 'ü¶Ö', 'ü¶â', 'ü¶á',
      'üê∫', 'üêó', 'üê¥', 'ü¶Ñ', 'üêù', 'üêõ', 'ü¶ã', 'üêå', 'üêû', 'üêú',
    ],
  },
  {
    name: 'Th·ª©c ƒÉn',
    emojis: [
      'üçè', 'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'üçà',
      'üçí', 'üçë', 'ü•≠', 'üçç', 'ü••', 'ü•ù', 'üçÖ', 'üçÜ', 'ü•ë', 'ü•¶',
      'ü•¨', 'ü•í', 'üå∂', 'üåΩ', 'ü•ï', 'üßÑ', 'üßÖ', 'ü•î', 'üç†', 'ü•ê',
      'ü•Ø', 'üçû', 'ü•ñ', 'ü•®', 'üßÄ', 'ü•ö', 'üç≥', 'üßà', 'ü•û', 'üßá',
    ],
  },
];

const {width} = Dimensions.get('window');

const StickyBoard = ({height = 250, visible, setVisible}) => {
  const [activeTab, setActiveTab] = useState(0);
  const [stickerSets, setStickerSets] = useState([]);
  const [loading, setLoading] = useState(false);
  const dispatch = useDispatch();
  const {conversations} = useSelector(state => state.chat);

  // Load sticker sets
  useEffect(() => {
    if (visible) {
      loadStickerSets();
    }
  }, [visible]);

  // Load sticker sets (in a real app, this would be from an API)
  const loadStickerSets = async () => {
    setLoading(true);
    try {
      // In a real app, you'd fetch stickers from an API
      // For now, we'll just use the emoji sets
      setStickerSets(EMOJI_SETS);
      setLoading(false);
    } catch (error) {
      console.error('Error loading sticker sets:', error);
      setLoading(false);
    }
  };

  // Send emoji or sticker as a message
  const handleSendEmoji = (emoji) => {
    const activeConversation = conversations.find(c => c.active);
    if (!activeConversation) return;

    dispatch(sendMessage({
      conversationId: activeConversation._id,
      content: emoji,
    }))
      .unwrap()
      .then(() => {
        // Success
      })
      .catch((error) => {
        console.error('Error sending emoji:', error);
      });
  };

  // Render header tabs for switching between emoji categories
  const renderTabs = () => {
    return (
      <View style={styles.tabsContainer}>
        {stickerSets.map((set, index) => (
          <TouchableOpacity
            key={`tab-${index}`}
            style={[styles.tab, activeTab === index && styles.activeTab]}
            onPress={() => setActiveTab(index)}>
            <Text style={[styles.tabText, activeTab === index && styles.activeTabText]}>
              {set.name}
            </Text>
          </TouchableOpacity>
        ))}
      </View>
    );
  };

  // Render emojis grid
  const renderEmojis = () => {
    if (loading) {
      return (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#007AFF" />
        </View>
      );
    }

    if (!stickerSets[activeTab]) {
      return (
        <View style={styles.emptyContainer}>
          <Text style={styles.emptyText}>Kh√¥ng c√≥ sticker</Text>
        </View>
      );
    }

    const currentEmojis = stickerSets[activeTab].emojis;

    return (
      <FlatList
        data={currentEmojis}
        keyExtractor={(item, index) => `emoji-${index}`}
        renderItem={({item}) => (
          <TouchableOpacity
            style={styles.emojiContainer}
            onPress={() => handleSendEmoji(item)}>
            <Text style={styles.emoji}>{item}</Text>
          </TouchableOpacity>
        )}
        numColumns={8}
        contentContainerStyle={styles.emojiGrid}
      />
    );
  };

  if (!visible) return null;

  return (
    <View style={[styles.container, {height}]}>
      <View style={styles.header}>
        <Text style={styles.title}>Bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c</Text>
        <TouchableOpacity onPress={() => setVisible(false)}>
          <Icon name="close" size={24} color="#666" />
        </TouchableOpacity>
      </View>
      
      {renderTabs()}
      {renderEmojis()}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#FFFFFF',
    borderTopWidth: 1,
    borderTopColor: '#E5E6E7',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E6E7',
  },
  title: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  tabsContainer: {
    flexDirection: 'row',
    padding: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E6E7',
  },
  tab: {
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 16,
    marginRight: 8,
  },
  activeTab: {
    backgroundColor: '#E6F2FF',
  },
  tabText: {
    fontSize: 14,
    color: '#666',
  },
  activeTabText: {
    color: '#007AFF',
    fontWeight: '600',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  emptyText: {
    fontSize: 16,
    color: '#888',
  },
  emojiGrid: {
    padding: 8,
  },
  emojiContainer: {
    width: width / 8 - 8,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    margin: 4,
  },
  emoji: {
    fontSize: 24,
  },
});

export default StickyBoard;
